# scripts/main.py

import json
import requests
from civic_lib import log_utils
from civic_lib.date_utils import today_utc_str
from civic_lib.config_utils import load_version

from pathlib import Path

log_utils.init_logger()
logger = log_utils.logger

ORG = "civic-interconnect"
AGENTS = [
    "agents-monitor-schema",
    "agents-monitor-bills",
    "agents-monitor-people",
    "agents-monitor-mapping",
]


def get_latest_action_status(repo):
    url = (
        f"https://api.github.com/repos/{ORG}/{repo}/actions/runs?branch=main&per_page=1"
    )
    response = requests.get(url)
    if response.status_code == 200:
        runs = response.json().get("workflow_runs", [])
        if runs:
            conclusion = runs[0].get("conclusion", "in_progress")
            return (
                f"{conclusion.capitalize()}"
                if conclusion == "success"
                else f"{conclusion.capitalize()}"
            )
    return "unknown"


def get_latest_commit(repo):
    url = f"https://api.github.com/repos/{ORG}/{repo}/commits/main"
    response = requests.get(url)
    if response.status_code == 200:
        commit = response.json()
        date = commit["commit"]["committer"]["date"]
        return date[:10]  # YYYY-MM-DD
    return "unknown"


def get_latest_tag(repo):
    url = f"https://api.github.com/repos/{ORG}/{repo}/tags"
    response = requests.get(url)
    if response.status_code == 200 and response.json():
        return response.json()[0]["name"]
    return "none"


def main():
    logger.info("===== Starting Dashboard Update =====")

    ROOT_DIR = Path(__file__).resolve().parent.parent
    logger.info(f"Root directory: {ROOT_DIR}")
    dashboard_version = load_version("VERSION")

    data = []

    for repo in AGENTS:
        version = get_latest_tag(repo)
        last_commit = get_latest_commit(repo)
        action_status = get_latest_action_status(repo)

        logger.info(
            f"{repo}: {version}, last_commit={last_commit}, status={action_status}"
        )

        agent_status = {
            "name": repo,
            "repo": f"https://github.com/{ORG}/{repo}",
            "version": version,
            "last_commit": last_commit,
            "action_status": action_status,
            "schema_source": "OpenStates"
            if "people" in repo or "bills" in repo
            else "OCD",
            "notes": "Autogenerated entry",
        }

        data.append(agent_status)

    dashboard_status = {
        "dashboard_version": dashboard_version,
        "generated": today_utc_str(),
        "agents": data,
    }

    output_file = Path("docs/status.json")
    output_file.write_text(json.dumps(dashboard_status, indent=2))
    logger.info(f"Wrote status.json with {len(data)} agents to {output_file}")
    logger.info("===== Dashboard Update Complete =====")


if __name__ == "__main__":
    main()
